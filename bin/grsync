#! /usr/bin/env ruby

require 'bundler/setup'
require 'net/ssh'
require 'trollop'
require 'json'

require 'grsync'
require 'grsync/logger'

# a sample command of grsync is like:
# ./grsync
#   --local ~/document/myrepo
#   --remote username@localhost:/home/username/myrepo
#   --passwd barabara
#   --port 2222

module GRSync
    RecordFilePath = '~/.grsync'
end

# parse arguments
opts = Trollop::options do
    opt :local, 'local source git repository(e.g. /path/to/repo)', :type => :string
    opt :remote, 'remote destination git repository(e.g. username@host:/path/to/repo)', :type => :string
    opt :passwd, 'password for ssh login', :type => :string
    opt :port, 'port for ssh login', :default => 22
    opt :save, 'save this synchronization link'
end

# if neither local repo or remote repo are given
# read arguments from the record file
if opts[:local].nil? and opts[:remote].nil?
    record_file_path = File.expand_path(GRSync::RecordFilePath)
    unless File.exist? record_file_path
        $Log.info 'Run without --local and --remote arguments. ' <<
                      "Tried to read the record file #{record_file_path} but it's not found."
        Trollop::die :local, 'must be specified when record file is unavailable'
    end

    # read meta data from record file
    record = JSON.parse(File.read(record_file_path))
    local = record['local']
    user_name = record['user_name']
    host = record['host']
    remote = record['remote']
    passwd = record['passwd']
    port = record['port']

# read arguments from command line
else
    local = opts[:local]
    remote_full = opts[:remote] # location with username, host and path

    Trollop::die :local, 'must be specified' if local.nil?
    Trollop::die :remote, 'must be specified' if remote_full.nil?

    # extract remote, user_name and host from dest_full
    login_str, remote = remote_full.split ':'
    if login_str.split('@').size == 2
        user_name, host = login_str.split('@')
    else
        user_name = nil
        host = login_str
    end

    # optional options for login
    passwd = opts[:passwd] || ''
    port = opts[:port]

    # save sync meta data into record file if -save flag specified
    if opts[:save]
        # collect meta data
        meta = {
            :local => local,
            :user_name => user_name,
            :host => host,
            :remote => remote,
            :passwd => passwd,
            :port => port
        }

        # write meta into record file
        File.open(File.expand_path(GRSync::RecordFilePath), mode='w') do |file|
            file.write JSON.dump(meta)
        end
    end
end

# local dir must exist
# always check existence asap
unless Dir.exist?(File.expand_path(local))
    $Log.error "Local directory #{local} doesn't exist"
    abort
end

# ssh login
begin
    Net::SSH.start(host, user_name, :password => passwd, :port => port) do |ssh|
        syncer = GRSync::Syncer.new ssh, local, remote
        syncer.sync
    end
rescue Net::SSH::AuthenticationFailed
    login_info = {
        host: host,
        user_name: user_name,
        port: port,
        passwd: passwd
    }
    $Log.error "Authentication failed. Please check whether the following login information is correct: #{login_info}"
    abort
rescue Exception => ex
    $Log.error "#{ex.class.name} -- #{ex}"
    abort
end

